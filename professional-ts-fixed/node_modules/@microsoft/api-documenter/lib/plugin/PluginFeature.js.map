{"version":3,"file":"PluginFeature.js","sourceRoot":"","sources":["../../src/plugin/PluginFeature.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAwD;AAExD;;;;;;;GAOG;AACH,MAAa,2BAA2B;IAItC,gBAAgB;IAChB;QACE,0BAA0B;IAC5B,CAAC;CACF;AARD,kEAQC;AAED;;;;;GAKG;AACH,MAAa,oBAAoB;CAAG;AAApC,oDAAoC;AAEpC,MAAM,iBAAiB,GAAW,sCAAsC,CAAC;AAEzE;;;GAGG;AACH,MAAsB,aAAa;IAMjC;;;;;OAKG;IACH,YAAmB,cAA2C;QAC5D,gCAAgC;QAChC,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ,CAAC;IACzC,CAAC;IAED;;;OAGG;IACI,aAAa;QAClB,+BAA+B;IACjC,CAAC;IAEM,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAgB;QACjD,OAAO,4BAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IAC5D,CAAC;CACF;AA5BD,sCA4BC;AAED,4BAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TypeUuid } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * This is an internal part of the plugin infrastructure.\r\n *\r\n * @remarks\r\n * This object is the constructor parameter for API Documenter plugin features.\r\n *\r\n * @public\r\n */\r\nexport class PluginFeatureInitialization {\r\n  /** @internal */\r\n  public _context!: PluginFeatureContext;\r\n\r\n  /** @internal */\r\n  public constructor() {\r\n    // reserved for future use\r\n  }\r\n}\r\n\r\n/**\r\n * Context object for {@link PluginFeature}.\r\n * Exposes various services that can be used by a plugin.\r\n *\r\n * @public\r\n */\r\nexport class PluginFeatureContext {}\r\n\r\nconst uuidPluginFeature: string = '56876472-7134-4812-819e-533de0ee10e6';\r\n\r\n/**\r\n * The abstract base class for all API Documenter plugin features.\r\n * @public\r\n */\r\nexport abstract class PluginFeature {\r\n  /**\r\n   * Exposes various services that can be used by a plugin.\r\n   */\r\n  public context: PluginFeatureContext;\r\n\r\n  /**\r\n   * The subclass should pass the `initialization` through to the base class.\r\n   * Do not put custom initialization code in the constructor.  Instead perform your initialization in the\r\n   * `onInitialized()` event function.\r\n   * @internal\r\n   */\r\n  public constructor(initialization: PluginFeatureInitialization) {\r\n    // reserved for future expansion\r\n    this.context = initialization._context;\r\n  }\r\n\r\n  /**\r\n   * This event function is called after the feature is initialized, but before any processing occurs.\r\n   * @virtual\r\n   */\r\n  public onInitialized(): void {\r\n    // (implemented by child class)\r\n  }\r\n\r\n  public static [Symbol.hasInstance](instance: object): boolean {\r\n    return TypeUuid.isInstanceOf(instance, uuidPluginFeature);\r\n  }\r\n}\r\n\r\nTypeUuid.registerClass(PluginFeature, uuidPluginFeature);\r\n"]}